---
import type { CollectionEntry } from "astro:content";
import Layout from "../components/Layout.astro";
import FormattedDate from "../components/FormattedDate.astro";
import { Image } from "astro:assets";
import TableOfContents from "../components/TableOfContents";
import AiButton from "../components/AiButton";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage, url } =
  Astro.props;

// Construct the LLM-friendly version URL - you can adjust this pattern
const llmFriendlyUrl = `${Astro.url.origin}${Astro.url.pathname.replace(/\/$/, "")}/llm`;
// This is a simple check - you might want to implement actual checking logic
const hasLlmVersion = !!url; // Replace with actual logic to check if LLM version exists
---

<Layout title={title} description={description}>
  <div class="relative xl:flex xl:justify-center xl:gap-8">
    <div class="">
      <TableOfContents client:only />
    </div>
    <div class="mx-auto w-full">
      <div class="flex items-center justify-between mb-8">
        <a
          href="/"
          class="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 group transition-colors"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="group-hover:-translate-x-0.5 transition-transform"
          >
            <path d="m15 18-6-6 6-6"></path>
          </svg>
          Back to home
        </a>
        {
          hasLlmVersion && (
            <AiButton client:load href={llmFriendlyUrl}>
              Copy to AI Assistant
            </AiButton>
          )
        }
      </div>
      <article>
        <div class="mb-8">
          <Image
            src={heroImage}
            alt=""
            transition:name={`hero-${Astro.params.slug}`}
            width={1020}
            height={510}
            class="rounded-xl mb-6"
          />
          <div class="text-center space-y-2">
            <h1
              class="text-2xl md:text-4xl font-bold text-gray-900 mb-4"
              transition:name={`title-${Astro.params.slug}`}
            >
              {title}
            </h1>
            <div class="flex flex-col items-center gap-3">
              <div
                class="flex items-center justify-center gap-1.5 text-gray-600 text-sm"
                transition:name={`date-${Astro.params.slug}`}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <rect width="18" height="18" x="3" y="4" rx="2" ry="2"></rect>
                  <line x1="16" x2="16" y1="2" y2="6"></line>
                  <line x1="8" x2="8" y1="2" y2="6"></line>
                  <line x1="3" x2="21" y1="10" y2="10"></line>
                </svg>
                <span>{updatedDate ? "Updated" : "Published"} on</span>
                <FormattedDate date={updatedDate || pubDate} />
              </div>
            </div>
          </div>
        </div>
        <div class="prose lg:prose-xl max-w-none">
          <slot />
        </div>
      </article>
    </div>
  </div>
</Layout>

<script>
  // Add IDs to headings for the ToC
  document.querySelectorAll("h2, h3, h4").forEach((heading) => {
    if (!heading.id) {
      heading.id =
        heading.textContent
          ?.toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/(^-|-$)/g, "") || "";
    }
  });
</script>

<style>
  :global(:root) {
    --header-offset: 24px;
  }
</style>
