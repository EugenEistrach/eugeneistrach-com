---
export const prerender = false;

const textContent = `## Setting Up Paraglide in TanStack Start (Core Steps)

### Installation

1.  Install Paraglide JS and its Vite plugin:

    \`\`\`bash
    npm install -D @inlang/paraglide-js @inlang/paraglide-vite
    \`\`\`

2.  Initialize Paraglide:

    \`\`\`bash
    npx @inlang/paraglide-js@latest init
    \`\`\`

### Configuration

1.  Configure the Vite plugin in \`app.config.ts\`. Adjust the \`project\` and \`outdir\` paths according to your project structure:

    \`\`\`typescript
    import { defineConfig } from "@tanstack/start/config";
    import tsConfigPaths from "vite-tsconfig-paths";
    import { paraglide } from "@inlang/paraglide-vite";

    export default defineConfig({
      vite: {
        plugins: [
          tsConfigPaths({
            projects: ["./tsconfig.json"],
          }),
          paraglide({
            project: "./project.inlang", // Adjust this path
            outdir: "./app/paraglide", // Adjust this path
          }),
        ],
      },
    });
    \`\`\`

### Language Detection and Switching

1.  Create a file for i18n utilities. Choose an appropriate location in your project (e.g., \`src/i18n.ts\`, \`lib/i18n.ts\`, or \`app/utils/i18n.ts\`) and create the file. Add the following content, adjusting the import paths as necessary:

    \`\`\`typescript
    import { createServerFn } from "@tanstack/start";
    import {
      type AvailableLanguageTag,
      availableLanguageTags,
    } from "../paraglide/runtime"; // Adjust this path
    import { getWebRequest, setCookie } from "@tanstack/start/server";
    import { useMatch, useRouter } from "@tanstack/react-router";

    export const DEFAULT_LANGUAGE: AvailableLanguageTag = "en";

    export const readLanguageFromHtmlLangAttribute = () => {
      const language = document.documentElement.lang;
      if (isSupportedLanguage(language)) {
        return language;
      }
      return DEFAULT_LANGUAGE;
    };

    export const getLanguageFromRequest = createServerFn({ method: "GET" }).handler(
      async () => {
        const request = getWebRequest();
        if (!request) return DEFAULT_LANGUAGE;

        const cookie = request.headers.get("cookie");
        const cookieLanguage = cookie
          ?.split("; ")
          .find((row: string) => row.startsWith("language="));
        const language = cookieLanguage?.split("=")[1];

        if (language && isSupportedLanguage(language)) {
          return language;
        }

        const acceptLanguage = request?.headers.get("accept-language");
        if (acceptLanguage) {
          const languages = acceptLanguage.split(",").map((lang) => {
            const [tag, quality = "q=1"] = lang.trim().split(";");
            return {
              tag: tag.trim(),
              quality: parseFloat(quality.split("=")[1]),
            };
          });

          languages.sort((a, b) => b.quality - a.quality);

          for (const { tag } of languages) {
            if (isSupportedLanguage(tag)) {
              return tag;
            }
          }
        }

        return DEFAULT_LANGUAGE;
      }
    );

    const setLanguage = createServerFn({ method: "POST" })
      .validator((data: { locale: string }) => data)
      .handler(async ({ data: { locale } }) => {
        setCookie("language", locale);
      });

    export const useLanguage = () => {
      const router = useRouter();
      const match = useMatch({ from: "__root__" });
      const language = match?.context.language ?? DEFAULT_LANGUAGE;
      const setLanguageFn = async (language: AvailableLanguageTag) => {
        await setLanguage({ data: { locale: language } });
        await router.invalidate();
      };
      return [language, setLanguageFn] as const;
    };

    const isSupportedLanguage = (
      language: string | null | undefined
    ): language is AvailableLanguageTag => {
      if (!language) return false;
      return availableLanguageTags.includes(language.trim() as any);
    };
    \`\`\`

### Creating a Language Switcher Component

1.  Create a language switcher component. Choose an appropriate location (e.g., \`src/components/LanguageSwitcher.tsx\`, \`components/LanguageSwitcher.tsx\`) and add the following content, adjusting the import paths as necessary:

    \`\`\`tsx
    import {
      availableLanguageTags,
      type AvailableLanguageTag,
    } from "../paraglide/runtime"; // Adjust this path
    import { useLanguage } from "../i18n"; // Adjust this path

    const LANGUAGE_NAMES: Record<AvailableLanguageTag, string> = {
      en: "English",
      de: "Deutsch",
    };

    export function LanguageSwitcher() {
      const [currentLanguage, setLanguage] = useLanguage();

      return (
        <div className="relative inline-block text-left">
          <div>
            <button
              type="button"
              className="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              id="language-menu-button"
              aria-expanded="true"
              aria-haspopup="true"
            >
              {LANGUAGE_NAMES[currentLanguage]}
              <svg
                className="-mr-1 ml-2 h-5 w-5"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clipRule="evenodd"
                />
              </svg>
            </button>
          </div>

          <div
            className="absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-menu-button"
            tabIndex={-1}
          >
            <div className="py-1" role="none">
              {availableLanguageTags.map((lang) => (
                <button
                  key={lang}
                  onClick={() => setLanguage(lang)}
                  className="text-gray-700 block w-full text-left px-4 py-2 text-sm hover:bg-gray-100 hover:text-gray-900 focus:outline-none focus:bg-gray-100 focus:text-gray-900"
                  role="menuitem"
                  tabIndex={-1}
                  id={\`language-menu-item-\${lang}\`}
                >
                  {LANGUAGE_NAMES[lang]}
                </button>
              ))}
            </div>
          </div>
        </div>
      );
    }
    \`\`\``;

return new Response(textContent, {
  headers: {
    "Content-Type": "text/plain",
  },
});
---
